import numpy as np
import pytest
from src.solver import Sudoku

def test_solve_1():
    puzzle = np.array([
        [9, 0, 0, 8, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 5, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 2, 0, 0, 1, 0, 0, 0, 3],
        [0, 1, 0, 0, 0, 0, 0, 6, 0],
        [0, 0, 0, 4, 0, 0, 0, 7, 0],
        [7, 0, 8, 6, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 3, 0, 1, 0, 0],
        [4, 0, 0, 0, 0, 0, 2, 0, 0]
    ])

    ans = np.array([
        [9, 7, 2, 8, 5, 3, 6, 1, 4],
        [1, 4, 6, 2, 7, 9, 5, 3, 8],
        [5, 8, 3, 1, 4, 6, 7, 2, 9],
        [6, 2, 4, 7, 1, 8, 9, 5, 3],
        [8, 1, 7, 3, 9, 5, 4, 6, 2],
        [3, 5, 9, 4, 6, 2, 8, 7, 1],
        [7, 9, 8, 6, 2, 1, 3, 4, 5],
        [2, 6, 5, 9, 3, 4, 1, 8, 7],
        [4, 3, 1, 5, 8, 7, 2, 9, 6]
    ], dtype=np.int8)

    Sudoku.reset_counter()
    s = Sudoku(puzzle)
    ret = s.solve()
    print(Sudoku.get_counter_stat())
    assert ret is not None
    assert np.array_equal(ret.assigned_board, ans)

def test_solve_2():
    puzzle = np.array([
        [3, 2, 1, 0, 0, 0, 0, 7, 0],
        [8, 0, 0, 0, 2, 0, 0, 0, 5],
        [0, 0, 0, 0, 0, 6, 0, 4, 0],
        [0, 3, 8, 0, 0, 7, 0, 0, 0],
        [2, 0, 0, 0, 0, 0, 0, 0, 9],
        [0, 0, 6, 4, 0, 0, 0, 2, 0],
        [0, 0, 0, 0, 0, 0, 6, 0, 0],
        [6, 0, 7, 0, 8, 0, 0, 0, 1],
        [9, 8, 0, 5, 0, 0, 0, 0, 0]
    ])
    
    ans = np.array([
        [3, 2, 1, 8, 4, 5, 9, 7, 6],
        [8, 6, 4, 7, 2, 9, 3, 1, 5],
        [5, 7, 9, 1, 3, 6, 8, 4, 2],
        [1, 3, 8, 2, 9, 7, 5, 6, 4],
        [2, 4, 5, 6, 1, 3, 7, 8, 9],
        [7, 9, 6, 4, 5, 8, 1, 2, 3],
        [4, 1, 3, 9, 7, 2, 6, 5, 8],
        [6, 5, 7, 3, 8, 4, 2, 9, 1],
        [9, 8, 2, 5, 6, 1, 4, 3, 7]
    ], dtype=np.int8)

    Sudoku.reset_counter()
    s = Sudoku(puzzle)
    ret = s.solve()
    print(Sudoku.get_counter_stat())
    assert ret is not None
    assert np.array_equal(ret.assigned_board, ans)

def test_solve_3():
    puzzle = np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [8, 0, 0, 0, 2, 0, 0, 0, 5],
        [0, 0, 0, 0, 0, 6, 2, 4, 0],
        [0, 3, 8, 0, 0, 7, 1, 0, 0],
        [2, 0, 4, 0, 0, 0, 3, 0, 9],
        [0, 0, 7, 4, 0, 0, 5, 2, 0],
        [0, 7, 2, 5, 0, 0, 0, 0, 0],
        [6, 0, 0, 0, 8, 0, 0, 0, 1],
        [0, 0, 0, 0, 0, 0, 0, 0, 0]
    ])
    
    ans = np.array([
        [4, 2, 6, 9, 3, 5, 8, 1, 7],
        [8, 1, 3, 7, 2, 4, 6, 9, 5],
        [7, 9, 5, 8, 1, 6, 2, 4, 3],
        [9, 3, 8, 2, 5, 7, 1, 6, 4],
        [2, 5, 4, 1, 6, 8, 3, 7, 9],
        [1, 6, 7, 4, 9, 3, 5, 2, 8],
        [3, 7, 2, 5, 4, 1, 9, 8, 6],
        [6, 4, 9, 3, 8, 2, 7, 5, 1],
        [5, 8, 1, 6, 7, 9, 4, 3, 2]
    ], dtype=np.int8)

    Sudoku.reset_counter()
    s = Sudoku(puzzle)
    ret = s.solve()
    print(Sudoku.get_counter_stat())
    assert ret is not None
    assert np.array_equal(ret.assigned_board, ans)

def test_cand_1():
    puzzle = np.array([
        [9, 0, 0, 8, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 5, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 2, 0, 0, 1, 0, 0, 0, 3],
        [0, 1, 0, 0, 0, 0, 0, 6, 0],
        [0, 0, 0, 4, 0, 0, 0, 7, 0],
        [7, 0, 8, 6, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 3, 0, 1, 0, 0],
        [4, 0, 0, 0, 0, 0, 2, 0, 0]
    ])

    cands = [
        [[9], [7], [2], [8], [5], [3], [6], [1], [4]],
        [[1], [4], [6], [2], [7], [9], [5], [3], [8]],
        [[5], [8], [3], [1], [4], [6], [7], [2], [9]],
        [[6], [2], [4], [7], [1], [8], [9], [5], [3]],
        [[8], [1], [7], [3], [9], [5], [4], [6], [2]],
        [[3], [5], [9], [4], [6], [2], [8], [7], [1]],
        [[7], [9], [8], [6], [2], [1], [3], [4], [5]],
        [[2], [6], [5], [9], [3], [4], [1], [8], [7]],
        [[4], [3], [1], [5], [8], [7], [2], [9], [6]]
    ]

    s = Sudoku(puzzle)
    Sudoku.reset_counter()
    s.solve_true_candidates()
    print(Sudoku.get_counter_stat())
    assert s.print_true_candidates() == cands

def test_cand_2():
    puzzle = np.array([
        [3, 0, 0, 0, 0, 0, 0, 0, 0],
        [8, 0, 0, 0, 2, 0, 0, 0, 5],
        [0, 0, 0, 0, 0, 6, 0, 4, 0],
        [0, 3, 8, 0, 0, 7, 0, 0, 0],
        [2, 0, 0, 0, 0, 0, 0, 0, 9],
        [0, 0, 0, 4, 0, 0, 0, 2, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [6, 0, 0, 0, 8, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0]
    ])

    cands = [
        [[3], [1, 2, 4, 5, 6, 7, 9], [1, 2, 4, 5, 6, 7, 9], [1, 5, 7, 8, 9], [1, 4, 5, 7, 9], [1, 4, 5, 8, 9], [1, 2, 6, 7, 8, 9], [1, 6, 7, 8, 9], [2, 6, 7, 8]],
        [[8], [1, 4, 6, 7, 9], [1, 4, 6, 7, 9], [1, 3, 7, 9], [2], [1, 3, 4, 9], [1, 3, 6, 7, 9], [1, 3, 6, 7, 9], [5]],
        [[5, 7, 9], [1, 2, 5, 7, 9], [1, 2, 5, 7, 9], [1, 3, 5, 7, 8, 9], [1, 3, 5, 7, 9], [6], [1, 2, 3, 7, 8, 9], [4], [2, 3, 7, 8]],
        [[4, 5, 9], [3], [8], [2], [1, 5, 6, 9], [7], [1, 4, 5, 6], [1, 5, 6], [4, 6]],
        [[2], [1, 4, 5, 6, 7], [1, 4, 5, 6, 7], [1, 3, 5, 6, 8], [1, 3, 5, 6], [1, 3, 5, 8], [1, 3, 4, 5, 6, 7, 8], [1, 3, 5, 6, 7, 8], [9]],
        [[5, 7, 9], [1, 5, 6, 7, 9], [1, 5, 6, 7, 9], [4], [1, 3, 5, 6, 9], [1, 3, 5, 8, 9], [1, 3, 5, 6, 7, 8], [2], [3, 6, 7, 8]],
        [[4, 5, 7, 9], [2, 4, 5, 7, 8, 9], [2, 3, 4, 5, 7, 9], [1, 3, 5, 6, 7, 9], [1, 3, 4, 5, 6, 7, 9], [1, 2, 3, 4, 5, 9], [2, 3, 5, 6, 7, 8, 9], [3, 5, 6, 7, 8, 9], [2, 3, 4, 6, 7, 8]],
        [[6], [2, 4, 5, 7, 9], [2, 3, 4, 5, 7, 9], [3, 5, 7, 9], [8], [2, 3, 4, 5, 9], [2, 3, 4, 5, 7, 9], [3, 5, 7, 9], [1]],
        [[1], [2, 4, 5, 7, 8, 9], [2, 3, 4, 5, 7, 9], [3, 5, 6, 7, 9], [3, 4, 5, 6, 7, 9], [2, 3, 4, 5, 9], [2, 3, 4, 5, 6, 7, 8, 9], [3, 5, 6, 7, 8, 9], [2, 3, 4, 6, 7, 8]]
    ]

    s = Sudoku(puzzle)
    Sudoku.reset_counter()
    s.solve_true_candidates()
    print(Sudoku.get_counter_stat())
    assert s.print_true_candidates() == cands

def test_cand_4():
    puzzle = np.array([
        [1, 2, 3, 0, 0, 0, 7, 0, 0],
        [0, 0, 0, 4, 0, 0, 0, 0, 0],
        [9, 0, 0, 0, 5, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 6, 8, 0, 0],
        [0, 0, 0, 7, 0, 0, 0, 0, 0],
        [0, 0, 8, 0, 0, 0, 0, 7, 0],
        [0, 0, 0, 0, 9, 0, 3, 0, 0],
        [4, 0, 2, 0, 0, 0, 0, 1, 0],
        [6, 0, 0, 0, 0, 0, 0, 0, 2]
    ])

    cands = [
        [[1], [2], [3], [6, 8, 9], [6, 8], [8, 9], [7], [4, 5], [4, 5]],
        [[5, 7, 8], [5, 6, 7, 8], [5, 6, 7], [4], [1, 2, 3, 7], [1, 2, 3, 7], [1, 2, 6, 9], [2, 3, 6, 8, 9], [1, 3, 6, 8, 9]],
        [[9], [4, 6, 7, 8], [4, 6, 7], [1, 2, 3], [5], [1, 2, 3, 7], [1, 2, 6], [2, 3, 6, 8], [1, 3, 6, 8]],
        [[2, 3, 5, 7], [1, 4, 5, 7, 9], [1, 4, 5, 7, 9], [1, 2, 3, 5, 9], [1, 2, 3, 4], [6], [8], [2, 3, 4, 5, 9], [1, 3, 4, 5, 9]],
        [[2, 3, 5], [1, 4, 5, 6, 9], [1, 4, 5, 6, 9], [7], [1, 2, 3, 4, 8], [1, 2, 3, 4, 5, 8, 9], [1, 2, 4, 5, 6, 9], [2, 3, 4, 5, 6, 9], [1, 3, 4, 5, 6, 9]],
        [[2, 3, 5], [1, 4, 5, 6, 9], [8], [1, 2, 3, 5, 9], [1, 2, 3, 4], [1, 2, 3, 4, 5, 9], [1, 2, 4, 5, 6, 9], [7], [1, 3, 4, 5, 6, 9]],
        [[5, 7, 8], [1, 5, 7, 8], [1, 5, 7], [1, 2, 5, 6, 8], [9], [1, 2, 4, 5, 7, 8], [3], [4, 5, 6, 8], [4, 5, 6, 7, 8]],
        [[4], [3, 5, 7, 8, 9], [2], [3, 5, 6, 8], [3, 6, 7, 8], [3, 5, 7, 8], [5, 6, 9], [1], [5, 6, 7, 8, 9]],
        [[6], [1, 3, 5, 7, 8, 9], [1, 5, 7, 9], [1, 3, 5, 8], [1, 3, 4, 7, 8], [1, 3, 4, 5, 7, 8], [4, 5, 9], [4, 5, 8, 9], [2]]
    ]

    s = Sudoku(puzzle)
    Sudoku.reset_counter()
    s.solve_true_candidates()
    print(Sudoku.get_counter_stat())
    assert s.print_true_candidates() == cands

def test_cand_3():
    puzzle = np.array([
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 2, 4, 7],
        [0, 0, 0, 0, 9, 0, 1, 8, 0],
        [0, 7, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 7, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 6, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0]
    ])

    cands = [
        [[1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 8], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 8], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8], [3, 5, 9], [3, 5, 6, 9], [3, 5, 6, 9]],
        [[1, 3, 5, 6, 8, 9], [1, 3, 5, 6, 8, 9], [1, 3, 5, 6, 8, 9], [1, 3, 5, 6, 8], [1, 3, 5, 6, 8], [1, 3, 5, 6, 8], [2], [4], [7]],
        [[2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6], [9], [2, 3, 4, 5, 6, 7], [1], [8], [3, 5, 6]],
        [[1, 2, 3, 4, 5, 6, 8, 9], [7], [1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 8], [1, 2, 3, 4, 5, 6, 8, 9], [3, 4, 5, 8, 9], [1, 2, 3, 5, 9], [1, 2, 3, 4, 5, 8, 9]],
        [[1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 8, 9], [7], [1, 2, 3, 4, 5, 6, 8], [1, 2, 3, 4, 5, 6, 8, 9], [3, 4, 5, 8, 9], [1, 2, 3, 5, 9], [1, 2, 3, 4, 5, 8, 9]],
        [[1, 2, 3, 4, 5, 8, 9], [1, 2, 3, 4, 5, 8, 9], [1, 2, 3, 4, 5, 8, 9], [1, 2, 3, 4, 5, 8, 9], [1, 2, 3, 4, 5, 8], [1, 2, 3, 4, 5, 8, 9], [6], [7], [1, 2, 3, 4, 5, 8, 9]],
        [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9], [3, 4, 5, 7, 8, 9], [1, 2, 3, 5, 6, 9], [1, 2, 3, 4, 5, 6, 8, 9]],
        [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9], [3, 4, 5, 7, 8, 9], [1, 2, 3, 5, 6, 9], [1, 2, 3, 4, 5, 6, 8, 9]],
        [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9], [3, 4, 5, 7, 8, 9], [1, 2, 3, 5, 6, 9], [1, 2, 3, 4, 5, 6, 8, 9]]
    ]

    s = Sudoku(puzzle)
    Sudoku.reset_counter()
    s.solve_true_candidates()
    print(Sudoku.get_counter_stat())
    assert s.print_true_candidates() == cands