import numpy as np
import pytest
from src.solver import Sudoku
from src.constraints import OrdArrowConstraint
from src.utils.type_definitions import *

def test_cand_1():
    puzzle = np.array([
        [9, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 2, 0, 0, 1, 0, 0, 0, 3],
        [0, 1, 0, 0, 0, 0, 0, 6, 0],
        [0, 0, 0, 4, 0, 0, 0, 7, 0],
        [7, 0, 8, 6, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 3, 0, 1, 0, 0],
        [4, 0, 0, 0, 0, 0, 2, 0, 0]
    ])

    cands = [
        [[9], [4, 7, 8], [2, 3, 6], [1, 2], [4, 5, 7, 8], [5, 7, 8], [3, 6], [1, 2, 3], [4, 5, 8]],
        [[1, 2, 3], [4, 7, 8], [2, 3, 5], [9], [6], [5, 7, 8], [3, 4, 5, 7], [1, 2, 3, 4, 5], [4, 5, 8]],
        [[1, 2, 6], [4, 7, 8], [2, 5, 6], [1, 2], [4, 5, 7, 8], [3], [4, 6, 7, 9], [1, 2, 4, 5, 9], [4, 5, 8, 9]],
        [[5, 8], [2], [4, 7], [5, 7, 8], [1], [6], [4, 5, 8, 9], [4, 5, 9], [3]],
        [[5, 8], [1], [4, 7], [3], [5, 7, 8, 9], [5, 7, 8, 9], [4, 5, 8], [6], [2]],
        [[3, 6], [6, 9], [3, 6, 9], [4], [5, 8], [2], [5, 8], [7], [1]],
        [[7], [3, 5, 9], [8], [6], [2], [1], [3, 4, 5, 9], [3, 4, 5, 9], [4, 5, 9]],
        [[2, 6], [5, 6, 9], [2, 6, 9], [5, 7, 8], [3], [4], [1], [5, 8, 9], [6, 7]],
        [[4], [3, 5, 6], [1], [5, 7, 8], [5, 7, 8, 9], [5, 7, 8, 9], [2], [3, 5, 8], [6, 7]]
    ]

    sum_pos_list = [(1,1), (1,2), (1,3)]
    prod_pos_list = [(1,4), (2,5)]
    oac = OrdArrowConstraint(sum_pos_list, prod_pos_list)

    Sudoku.reset_counter()
    s = Sudoku(puzzle, [oac])
    Sudoku.reset_counter()
    s.solve_true_candidates()
    print(Sudoku.get_counter_stat())
    assert s.print_true_candidates() == cands

def test_cand_2():
    puzzle = np.array([
        [9, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 0, 0, 0, 0, 0],
        [0, 2, 0, 0, 1, 0, 0, 0, 3],
        [0, 1, 0, 0, 0, 0, 0, 6, 0],
        [0, 0, 0, 4, 0, 0, 0, 7, 0],
        [7, 0, 8, 6, 0, 0, 0, 0, 0],
        [0, 0, 0, 0, 3, 0, 1, 0, 0],
        [4, 0, 0, 0, 0, 0, 2, 0, 0]
    ])

    cands = [
        [[9], [4, 7, 8], [3, 5, 6], [2], [4, 5, 6, 8], [3, 6, 7], [4, 6, 7], [1], [5, 8]],
        [[6, 8], [4, 5], [2], [1], [4, 5], [7, 8], [6, 7], [3], [9]],
        [[1], [4, 7, 8], [3, 5, 6], [3, 5, 7, 8, 9], [4, 5, 6, 8, 9], [3, 5, 6, 7, 8, 9], [4, 6, 7], [2], [5, 8]],
        [[5, 6, 8], [2], [7], [5, 8, 9], [1], [5, 6, 8, 9], [8, 9], [4], [3]],
        [[5, 8], [1], [4], [3, 5, 7, 8, 9], [7, 8, 9], [3, 5, 7, 8, 9], [8, 9], [6], [2]],
        [[3], [6, 8, 9], [6, 9], [4], [6, 8], [2], [5], [7], [1]],
        [[7], [5, 9], [8], [6], [2], [1], [3], [5, 9], [4]],
        [[2], [5, 6, 9], [5, 6, 9], [5, 8, 9], [3], [4], [1], [5, 8, 9], [7]],
        [[4], [3], [1], [5, 7, 8, 9], [5, 7, 8, 9], [5, 7, 8, 9], [2], [5, 8, 9], [6]]
    ]

    sum_pos_list = [(1,1), (1,2), (1,3), (1,4)]
    prod_pos_list = [(1,5)]
    oac = OrdArrowConstraint(sum_pos_list, prod_pos_list)

    Sudoku.reset_counter()
    s = Sudoku(puzzle, [oac])
    Sudoku.reset_counter()
    s.solve_true_candidates()
    print(Sudoku.get_counter_stat())
    assert s.print_true_candidates() == cands